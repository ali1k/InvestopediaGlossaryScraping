{"name": "Luhn Algorithm Definition", "@id": "https://www.investopedia.com/terms/l/luhn-algorithm.asp", "related": ["https://www.investopedia.com/terms/b/blockchain.asp", "https://www.investopedia.com/terms/a/authorization-date.asp", "https://www.investopedia.com/terms/c/card-reader.asp", "https://www.investopedia.com/terms/l/least-squares-method.asp", "https://www.investopedia.com/terms/c/card-recovery-bulletin.asp", "https://www.investopedia.com/terms/a/address-verification-system.asp"], "body": ["\nThe Luhn Algorithm\u2014also known as the \u201cModulus 10 Algorithm\u201d\u2014is a formula that is used to determine whether the identification number provided by a user is accurate. The formula is widely used in validating <a data-component=\"link\" data-ordinal=\"1\" data-source=\"inlineLink\" data-type=\"internalLink\" href=\"https://www.investopedia.com/terms/c/creditcard.asp\" rel=\"noopener noreferrer\">credit card</a> numbers, as well as other number sequences such as government <a data-component=\"link\" data-ordinal=\"2\" data-source=\"inlineLink\" data-type=\"internalLink\" href=\"https://www.investopedia.com/terms/s/ssn.asp\" rel=\"noopener noreferrer\">Social Security Numbers (SSNs)</a>.\n", "\nToday, the Luhn Algorithm is an essential component in the electronics payments system and is used by all major credit cards.\n", "\nThe LUHN formula algorithm was developed by a German Computer Scientist named Hans Peter Luhn in 1954 while working as a researcher at IBM. <span class=\"ql-inline-citation\" data-cite=\"1\">\ufeff</span>\ufeff\u00a0The exact workings of the algorithm are based on modular arithmetic, a mathematical technique developed by Carl Friedrich Gauss in the early 19th century. Although its detailed workings are rather complex, it is best known for allowing computers to quickly assess whether the credit card numbers provided by customers are accurate.<span class=\"ql-inline-citation\" data-cite=\"2\">\ufeff</span>\ufeff\n", "\nThe way it does so is by applying a series of computations to the credit card number given, adding up the results of those computations, and checking whether the resulting number matches the expected result. If it does, then the credit number is deemed valid. If not, the algorithm will reject the credit card number, indicating that the user made an error when inputting the number.\n", "\nFrom a customer\u2019s perspective, we use the Luhn Algorithm all the time, without even realizing it. When placing orders online or using a merchant\u2019s <a data-component=\"link\" data-ordinal=\"1\" data-source=\"inlineLink\" data-type=\"internalLink\" href=\"https://www.investopedia.com/terms/p/point-of-sale.asp\" rel=\"noopener noreferrer\">point of sale (POS) terminal</a>, computer systems are able to quickly tell when we have made a mistake inputting our information. This is because the Luhn Algorithm has been incorporated into those systems\u2019 programming. Without it, we would need to wait until the entire purchase order is submitted before realizing whether the transaction was approved. The Luhn Algorithm, in other words, helps us quickly identify user errors and thereby speed up the pace of transactions.\"\n", "\nOne of the central concepts within the Luhn Algorithm is the use of so-called \u201ccheck digits.\u201d These digits consist of numbers that are inserted into the broader number sequence in order to help verify, or \u201ccheck,\u201d whether the whole number is authentic.\n", "\nFor credit cards, the check digit consists of a single digit printed at the end of the credit card number. Rather than being specifically chosen by the credit card company, the check digit is instead automatically determined by the Luhn Algorithm, based on the preceding numbers in the sequence. When users enter their credit card numbers to complete transactions, the payment processing software can use the Luhn Algorithm to detect whether the specified number is accurate, based in part on its check digit.\n", "\nToday, the Luhn Algorithm is integrated into popular programming languages and code libraries, making it relatively easy to include Luhn-based identification number verification in new software applications.\n"]}